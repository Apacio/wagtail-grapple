# Generated by Django 3.2.14 on 2022-07-29 15:51

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.embeds.blocks
import wagtail.images.blocks
import wagtail_headless_preview.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("wagtailmedia", "0004_duration_optional_floatfield"),
        ("documents", "0001_initial"),
        ("images", "0001_initial"),
        ("wagtailcore", "0066_collection_management_permissions"),
        ("taggit", "0003_taggeditem_add_unique_index"),
    ]

    operations = [
        migrations.CreateModel(
            name="Advert",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField(blank=True, null=True)),
                ("text", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="AuthorPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="BlogPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("date", models.DateField(verbose_name="Post date")),
                (
                    "body",
                    wagtail.core.fields.StreamField(
                        [
                            (
                                "heading",
                                wagtail.core.blocks.CharBlock(
                                    form_classname="full title"
                                ),
                            ),
                            ("paragraph", wagtail.core.blocks.RichTextBlock()),
                            ("image", wagtail.images.blocks.ImageChooserBlock()),
                            ("decimal", wagtail.core.blocks.DecimalBlock()),
                            ("date", wagtail.core.blocks.DateBlock()),
                            ("datetime", wagtail.core.blocks.DateTimeBlock()),
                            (
                                "gallery",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.core.blocks.CharBlock(
                                                form_classname="full title"
                                            ),
                                        ),
                                        (
                                            "images",
                                            wagtail.core.blocks.StreamBlock(
                                                [
                                                    (
                                                        "image",
                                                        wagtail.core.blocks.StructBlock(
                                                            [
                                                                (
                                                                    "caption",
                                                                    wagtail.core.blocks.CharBlock(
                                                                        form_classname="full title"
                                                                    ),
                                                                ),
                                                                (
                                                                    "image",
                                                                    wagtail.images.blocks.ImageChooserBlock(),
                                                                ),
                                                            ]
                                                        ),
                                                    )
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "video",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        (
                                            "youtube_link",
                                            wagtail.embeds.blocks.EmbedBlock(
                                                required=False
                                            ),
                                        )
                                    ]
                                ),
                            ),
                            (
                                "objectives",
                                wagtail.core.blocks.ListBlock(
                                    wagtail.core.blocks.CharBlock()
                                ),
                            ),
                            (
                                "carousel",
                                wagtail.core.blocks.StreamBlock(
                                    [
                                        (
                                            "text",
                                            wagtail.core.blocks.CharBlock(
                                                form_classname="full title"
                                            ),
                                        ),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        ("markup", wagtail.core.blocks.RichTextBlock()),
                                    ]
                                ),
                            ),
                            (
                                "callout",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        ("text", wagtail.core.blocks.RichTextBlock()),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                "text_and_buttons",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        ("text", wagtail.core.blocks.TextBlock()),
                                        (
                                            "buttons",
                                            wagtail.core.blocks.ListBlock(
                                                wagtail.core.blocks.StructBlock(
                                                    [
                                                        (
                                                            "button_text",
                                                            wagtail.core.blocks.CharBlock(
                                                                label="Text",
                                                                max_length=50,
                                                                required=True,
                                                            ),
                                                        ),
                                                        (
                                                            "button_link",
                                                            wagtail.core.blocks.CharBlock(
                                                                label="Link",
                                                                max_length=255,
                                                                required=True,
                                                            ),
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ),
                                        (
                                            "mainbutton",
                                            wagtail.core.blocks.StructBlock(
                                                [
                                                    (
                                                        "button_text",
                                                        wagtail.core.blocks.CharBlock(
                                                            label="Text",
                                                            max_length=50,
                                                            required=True,
                                                        ),
                                                    ),
                                                    (
                                                        "button_link",
                                                        wagtail.core.blocks.CharBlock(
                                                            label="Link",
                                                            max_length=255,
                                                            required=True,
                                                        ),
                                                    ),
                                                ]
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            ("page", wagtail.core.blocks.PageChooserBlock()),
                            (
                                "text_with_callable",
                                wagtail.core.blocks.StructBlock(
                                    [
                                        ("text", wagtail.core.blocks.CharBlock()),
                                        ("integer", wagtail.core.blocks.IntegerBlock()),
                                        ("decimal", wagtail.core.blocks.FloatBlock()),
                                    ]
                                ),
                            ),
                            (
                                "block_with_name",
                                wagtail.core.blocks.StructBlock(
                                    [("name", wagtail.core.blocks.TextBlock())]
                                ),
                            ),
                        ]
                    ),
                ),
                (
                    "advert",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="home.advert",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="home.authorpage",
                    ),
                ),
                (
                    "book_file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="documents.customdocument",
                    ),
                ),
                (
                    "featured_media",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailmedia.media",
                    ),
                ),
                (
                    "hero_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="images.customimage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtail_headless_preview.models.HeadlessPreviewMixin,
                "wagtailcore.page",
            ),
        ),
        migrations.CreateModel(
            name="GlobalSocialMediaSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("facebook", models.URLField(help_text="Your Facebook page URL")),
                (
                    "instagram",
                    models.CharField(
                        help_text="Your Instagram username, without the @",
                        max_length=255,
                    ),
                ),
                (
                    "trip_advisor",
                    models.URLField(help_text="Your Trip Advisor page URL"),
                ),
                (
                    "youtube",
                    models.URLField(
                        help_text="Your YouTube channel or user account URL"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("job", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="SimpleModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SocialMediaSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("facebook", models.URLField(help_text="Your Facebook page URL")),
                (
                    "instagram",
                    models.CharField(
                        help_text="Your Instagram username, without the @",
                        max_length=255,
                    ),
                ),
                (
                    "trip_advisor",
                    models.URLField(help_text="Your Trip Advisor page URL"),
                ),
                (
                    "youtube",
                    models.URLField(
                        help_text="Your YouTube channel or user account URL"
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlogPageTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="home.blogpage",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="home_blogpagetag_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlogPageRelatedLink",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("name", models.CharField(max_length=255)),
                ("url", models.URLField()),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related_links",
                        to="home.blogpage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="blogpage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="home.BlogPageTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("role", models.CharField(max_length=255)),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authors",
                        to="home.blogpage",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="home.person",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
    ]
